generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  name        String
  email       String   @unique
  passwordHash String
  avatar      String?
  status      String   @default("offline")
  contacts    User[]   @relation("UserContacts", references: [id])
  ContactLinks Contact[] @relation("ContactOwner")
  messagesFrom Message[] @relation("from")
  chats       ChatMember[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Contact {
  id       Int   @id @default(autoincrement())
  ownerId  Int
  contactId Int
  owner    User @relation("ContactOwner", fields: [ownerId], references: [id])
  contact  User @relation("UserContacts", fields: [contactId], references: [id])
}

model Chat {
  id          Int      @id @default(autoincrement())
  isGroup     Boolean  @default(false)
  title       String?
  members     ChatMember[]
  messages    Message[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ChatMember {
  id     Int   @id @default(autoincrement())
  chat   Chat  @relation(fields: [chatId], references: [id])
  chatId Int
  user   User  @relation(fields: [userId], references: [id])
  userId Int
}

model Message {
  id          Int      @id @default(autoincrement())
  chat        Chat     @relation(fields: [chatId], references: [id])
  chatId      Int
  from        User     @relation("from", fields: [fromId], references: [id])
  fromId      Int
  text        String?
  attachments String[]
  reactions   Reaction[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Reaction {
  id        Int    @id @default(autoincrement())
  emoji     String
  by        User   @relation(fields: [byId], references: [id])
  byId      Int
  message   Message @relation(fields: [messageId], references: [id])
  messageId Int
}
